#!/usr/bin/env node

process.env.NODE_PATH = __dirname + '/../node_modules/'

const { resolve } = require('path')
const res = command => resolve(__dirname, '../src/commands/', command)
const program = require('commander')

program
  .version(require('../package').version)

program
  .usage('<command>')

program
  .command('server')
  .description('Start a devServer')
  .action(() => {
    require(res('server'))
  })

program
  .command('fetch')
  .description('fetch something')
  .action(() => {
    require(res('fetch'))
  })


program
  .command('dll')
  .description('create dll')
  .action(() => {
    require(res('dll'))
  })

program
  .command('build')
  .description('build production')
  .action(() => {
    require(res('build'))
  })

program
  .command('clean')
  .description('clean outputdir')
  .action(() => {
    require(res('clean'))
  })

program
  .command('addtpl')
  .description('Add a new template')
  .action(() => {
    require(res('addtpl'))
  })

program
  .command('template')
  .description('List all the templates')
  .alias('tpl')
  .action(() => {
    require(res('template'))
  })

program
  .command('generate')
  .description('Generate a new module')
  .action(() => {
    require(res('generate'))
  })

program
  .command('deletetpl')
  .description('Delete a template')
  .action(() => {
    require(res('deletetpl'))
  })

// program
//   .command('map')
//   .description('Place files to diffirent position')
//   .alias('m')
//   .action(() => {
//     require(res('map'))
//   })

program.parse(process.argv)

if (!program.args.length) {
  program.help()
}
